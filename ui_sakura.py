# üì¶ –ò–º–ø–æ—Ä—Ç –Ω—É–∂–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ tkinter (–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
from tkinter import (
    Label, Entry, Button, StringVar, OptionMenu, filedialog,
    Text, Scrollbar, Frame
)

# üì¶ –ò–º–ø–æ—Ä—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import yt_dlp  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å YouTube –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
import os  # –†–∞–±–æ—Ç–∞ —Å –ø—É—Ç—è–º–∏ –∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import threading  # –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—á—Ç–æ–±—ã –Ω–µ —Ç–æ—Ä–º–æ–∑–∏–ª –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
import requests  # –î–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–≤—å—é)
from PIL import Image, ImageTk  # –†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (PIL = Pillow)
from io import BytesIO  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤ –≤ –∫–∞—Ä—Ç–∏–Ω–∫—É
import re  # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤)
import random  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—Ç—Ä–æ–∫
import string  # –°–∏–º–≤–æ–ª—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º—ë–Ω

# –ü—É—Ç—å –∫ ffmpeg (–Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)
FFMPEG_PATH = os.path.join(os.path.dirname(__file__), "ffmpeg", "bin", "ffmpeg.exe")

# üîß –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
def generate_random_filename(length=10):
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=length))

# üéØ –ö–∞—Å—Ç–æ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ yt_dlp –≤ GUI
class YTDLogger:
    def __init__(self, log_func):
        self.log_func = log_func  # –°—é–¥–∞ –ø–µ—Ä–µ–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

    def debug(self, msg):
        if msg.strip():
            self.log_func(msg)

    def warning(self, msg):
        self.log_func(f"‚ö†Ô∏è {msg}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

    def error(self, msg):
        self.log_func(f"‚ùå {msg}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏

# üå∏ –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
class SakuraDownloader:
    def __init__(self, root):
        self.root = root  # –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.url = StringVar()
        self.quality = StringVar()
        self.download_type = StringVar(value="–í–∏–¥–µ–æ + –ê—É–¥–∏–æ")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.output_path = StringVar()
        self.video_title = StringVar()
        self.thumb_url_map = {}  # –°–ª–æ–≤–∞—Ä—å —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ø—Ä–µ–≤—å—é
        self.thumb_resolution = StringVar(value="maxresdefault")  # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é
        self.formats = []  # –°–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–∏–¥–µ–æ

        self.thumbnail = None  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é
        self.log_output = None  # –ü–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤

        self.build_ui()  # –°—Ç—Ä–æ–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

    # üß± –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    def build_ui(self):
        self.root.configure(bg="#ffe6f0")  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –æ–∫–Ω–∞

        # üì¶ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ä–∞–º–∫–æ–π
        frame = Frame(self.root, bg="#fff0f5", padx=15, pady=15, bd=3, relief="ridge")
        frame.pack(padx=10, pady=10)

        row = 0
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        Label(frame, text="üå∏ –°–∞–∫—É—Ä–∞ –ó–∞–≥—Ä—É–∑—á–∏–∫", bg="#fff0f5", fg="#d63384", font=("Helvetica", 16, "bold")).grid(row=row, column=0, columnspan=3, pady=10)

        # üéØ –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏
        row += 1
        Label(frame, text="–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ:", bg="#fff0f5").grid(row=row, column=0, sticky="w")
        Entry(frame, textvariable=self.url, width=50).grid(row=row, column=1)
        Button(frame, text="üîç", command=self.refresh_video_info, bg="#ffcce5").grid(row=row, column=2)

        # üñºÔ∏è –ü—Ä–µ–≤—å—é + –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        row += 1
        self.thumb_label = Label(frame, bg="#fff0f5")
        self.thumb_label.grid(row=row, column=0, columnspan=1)
        Label(frame, textvariable=self.video_title, wraplength=400, bg="#fff0f5", fg="#cc3366").grid(row=row, column=1, columnspan=2)

        # üéûÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ
        row += 1
        Label(frame, text="–ö–∞—á–µ—Å—Ç–≤–æ:", bg="#fff0f5").grid(row=row, column=0, sticky="w")
        self.quality_menu = OptionMenu(frame, self.quality, "")  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø–æ–∑–∂–µ
        self.quality_menu.grid(row=row, column=1)

        # üéß –¢–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏
        row += 1
        Label(frame, text="–¢–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏:", bg="#fff0f5").grid(row=row, column=0, sticky="w")
        OptionMenu(frame, self.download_type, "–í–∏–¥–µ–æ", "–ê—É–¥–∏–æ", "–í–∏–¥–µ–æ + –ê—É–¥–∏–æ").grid(row=row, column=1)

        # üíæ –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        row += 1
        Label(frame, text="–ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", bg="#fff0f5").grid(row=row, column=0, sticky="w")
        Entry(frame, textvariable=self.output_path, width=30).grid(row=row, column=1)
        Button(frame, text="üìÇ", command=self.choose_output_folder, bg="#ffcce5").grid(row=row, column=2)

        # üñºÔ∏è –í—ã–±–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–≤—å—é
        row += 1
        Label(frame, text="–ü—Ä–µ–≤—å—é —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ:", bg="#fff0f5").grid(row=row, column=0, sticky="w")
        OptionMenu(frame, self.thumb_resolution, "maxresdefault", "sddefault", "hqdefault", "mqdefault", "default").grid(row=row, column=1)
        Button(frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–≤—å—é", command=self.save_thumbnail, bg="#ffb3d9").grid(row=row, column=2)

        # üìÉ –õ–æ–≥–∏
        row += 1
        Label(frame, text="–õ–æ–≥:", bg="#fff0f5").grid(row=row, column=0, sticky="w")

        row += 1
        self.log_output = Text(frame, height=8, wrap="word", bg="#fff0f5", fg="#800040")
        self.log_output.grid(row=row, column=0, columnspan=3)
        scrollbar = Scrollbar(frame, command=self.log_output.yview)
        scrollbar.grid(row=row, column=3, sticky="ns")
        self.log_output.config(yscrollcommand=scrollbar.set)

        # –ö–Ω–æ–ø–∫–∞ –°–ö–ê–ß–ê–¢–¨
        row += 1
        Button(frame, text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å", command=self.download_video, bg="#ff99cc").grid(row=row, column=1, pady=10)

    # üìÅ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
    def choose_output_folder(self):
        folder = filedialog.askdirectory()
        if folder:
            self.output_path.set(folder)

    # üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ –æ –≤–∏–¥–µ–æ –∏ –ø—Ä–µ–≤—å—é
    def refresh_video_info(self):
        url = self.url.get().strip()
        if not url:
            return

        def task():  # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –ø–æ—Ç–æ–∫–µ
            self.log("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ...")
            try:
                ydl_opts = {"quiet": True, "skip_download": True}
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    info = ydl.extract_info(url, download=False)
                    self.video_title.set(info.get("title", ""))
                    self.formats = info.get("formats", [])

                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
                    self.quality_menu['menu'].delete(0, 'end')
                    for fmt in self.formats:
                        label = f"{fmt.get('format_id')} - {fmt.get('format_note', '')} - {fmt.get('ext', '')}"
                        self.quality_menu['menu'].add_command(label=label,
                                                              command=lambda v=fmt.get("format_id"): self.quality.set(v))
                    if self.formats:
                        self.quality.set(self.formats[0]['format_id'])

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é
                    video_id = info.get("id")
                    if video_id:
                        resolutions = ["maxresdefault", "sddefault", "hqdefault", "mqdefault", "default"]
                        self.thumb_url_map = {res: f"https://img.youtube.com/vi/{video_id}/{res}.jpg" for res in resolutions}
                        chosen = self.thumb_url_map[self.thumb_resolution.get()]
                        response = requests.get(chosen)
                        img = Image.open(BytesIO(response.content)).resize((120, 90))
                        self.thumbnail = ImageTk.PhotoImage(img)
                        self.thumb_label.configure(image=self.thumbnail)

            except Exception as e:
                self.log(f"–û—à–∏–±–∫–∞: {e}")

        threading.Thread(target=task).start()

    # üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é
    def save_thumbnail(self):
        if not self.thumb_url_map:
            self.log("–ù–µ—Ç –ø—Ä–µ–≤—å—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return

        url = self.thumb_url_map.get(self.thumb_resolution.get())
        if not url:
            return

        folder = filedialog.askdirectory()
        if not folder:
            return

        try:
            response = requests.get(url)
            title = self.video_title.get()
            if re.search(r'[\\/*?:"<>|]', title):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
                filename = generate_random_filename()
                self.log("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ–Ω–µ–Ω–æ.")
            else:
                filename = title.replace(" ", "_")

            filepath = os.path.join(folder, f"{filename}_{self.thumb_resolution.get()}.jpg")
            with open(filepath, "wb") as f:
                f.write(response.content)
            self.log(f"–ü—Ä–µ–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞: {e}")

    # ‚¨áÔ∏è –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ
    def download_video(self):
        def task():
            path = self.output_path.get() or "output"
            os.makedirs(path, exist_ok=True)
            url = self.url.get().strip()
            mode = self.download_type.get()

            try:
                format_id = self.quality.get()
                ydl_opts = {
                    "format": format_id if mode != "–í–∏–¥–µ–æ + –ê—É–¥–∏–æ" else "bestvideo+bestaudio",
                    "outtmpl": os.path.join(path, "%(title)s.%(ext)s"),
                    "ffmpeg_location": FFMPEG_PATH,
                    "postprocessors": [],
                    "logger": YTDLogger(self.log)  # üëà –ü–µ—Ä–µ–¥–∞—ë–º –ª–æ–≥–≥–µ—Ä
                }
                if mode == "–ê—É–¥–∏–æ":
                    ydl_opts["postprocessors"].append({
                        'key': 'FFmpegExtractAudio',
                        'preferredcodec': 'mp3',
                        'preferredquality': '192',
                    })

                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    ydl.download([url])

                self.log("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

        threading.Thread(target=task).start()

    # üì¢ –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
    def log(self, msg):
        self.log_output.insert("end", msg + "\n")
        self.log_output.see("end")

# üèóÔ∏è –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
def build_ui(root):
    SakuraDownloader(root)